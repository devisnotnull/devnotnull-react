service: fandanzle-sls-ui

frameworkVersion: ">=2.0.0"
variablesResolutionMode: 20210326
plugins:
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-prune-plugin
#  - serverless-domain-manager
  - serverless-s3-sync

custom:
  serverless-offline:
    port: 3000 

  ##
  localDevStaticFolder: build
  domainName: sls.devnotnull.com
  ##
  siteName: devnotnull.com

  ## Retention
  prune:
    automatic: true
    includeLayers: true
    number: 10

  ## 
  deploymentBucket:
    versioning: true
    accelerate: true

  ## S3 bucket for static assets
  s3Sync:
    - bucketName: devnotnull.com${self:custom.environment}
      bucketPrefix: static/
      localDir: build/static
    - bucketName: devnotnull.com${self:custom.environment}
      bucketPrefix: assets/
      localDir: build/assets
    - bucketName: devnotnull.com${self:custom.environment}
      bucketPrefix: media/
      localDir: media
  ##
  environment: ${opt:stage, 'development'}

  ##
  customDomain:
    domainName: sls.devnotnull.com
    certificateArn: "arn:aws:acm:us-east-1:298900675756:certificate/fc9c610c-425f-46ee-a9b5-33da273a313a"
    basePath: ''
    createRoute53Record: true
    enabled: true
    endpointType: 'edge'

## 
package:
  exclude:
    - .cache/**
    - .github/**
    - node_modules/**
    - src/**

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 10 
  region: ${opt:region, 'eu-west-2'}
  stackName: ${self:service}-${self:custom.environment}
  environment:
    NODE_RUNTIME_ENV: ${self:custom.environment}

functions:
  server:
    handler: build/serverless.handler
    environment:
      NODE_RUNTIME_ENV: ${self:custom.environment}
    events:
      - http:
          path: / # this matches any path, the token 'any' doesn't mean anything special
          method: GET
      - http:
          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special
          method: GET

resources:
  Resources:
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: devnotnull.com${self:custom.environment}
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AssetsBucket
                  - /*
        Bucket: !Ref AssetsBucket
    